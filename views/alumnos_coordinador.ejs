<%- include('includes/_nav_coordinador.ejs') %>
<%- include('includes/_header_coordinador.ejs') %>

<main class="bg-grey flex-grow-1 rounded-5 p-0 d-flex flex-column materia-scroll" style="height: 100vh;">
  <div class="d-flex justify-content-between">
    <div class="mb-4">
      <h1 class="ms-3 mt-2">Alumnos</h1>
      <div style="border-bottom: 3px solid #84251C; width: 13rem; margin-top: -10px;"></div>
    </div>
    <form action="/coordinador/alumnos/sincronizar" method="POST">
      <button type="submit" class="btn btn-primary d-flex align-items-center gap-2 rounded-pill px-3 py-2 me-5 mt-3" 
      style="background-color: #84251C; border: none;">
        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-clockwise" viewBox="0 0 16 16">
          <path fill-rule="evenodd" d="M8 3a5 5 0 1 0 4.546 2.914.5.5 0 0 1 .908-.417A6 6 0 1 1 8 2z"/>
          <path d="M8 4.466V.534a.25.25 0 0 1 .41-.192l2.36 1.966c.12.1.12.284 0 .384L8.41 4.658A.25.25 0 0 1 8 4.466"/>
        </svg>
        Sincronizar Alumnos
      </button>
    </form>
  </div>
  <!-- Si el msg string no es null, muestra un mensaje del resultado de la operación -->
  <% if (msg) { %>
    <div class="modal fade" id="msgModal" tabindex="-1" aria-labelledby="msgModalLabel" aria-hidden="true">
      <div class="modal-dialog modal-dialog-centered modal-sm">
        <div class="modal-content align-items-center rounded-5">
          <div class="modal-header border border-0">
            <h5 class="modal-title ivd-text-red" id="msgModalLabel">Sincronizar Alumnos</h5>
          </div>
          <div class="modal-body bg-grey rounded-5 text-center px-5">
            <%- msg %>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn ivd-bg-red text-white rounded-5" data-bs-dismiss="modal">Aceptar</button>
          </div>
        </div>
      </div>
    </div>
  <% } %>

  <div class="d-flex align-items-center justify-content-between me-5 mb-3 flex-wrap">
    <h3 class="ms-5 mb-0 text-decoration-underline ivd-text-red">Regulares</h3>
    <div class="d-flex align-items-center flex-grow-1" style="max-width: 200px;">
      <input id="buscarAlumnoRegular" class="form-control rounded-pill" type="search" placeholder="Buscar alumno" aria-label="Search"
            style="background-image:url('/images/search.svg');
                    background-repeat:no-repeat;
                    background-position: 1rem center; 
                    padding-left: 3rem; 
                    font-size: 1rem;
                    width: 100%;
                    border: 1px solid #84251C;">
    </div>
  </div>
  <div class="table-responsive mx-5 mb-3 rounded-5 flex-grow-1" style="min-height: 45vh; overflow: auto;  background-color: white;">
    <table class="table table-hover" style="min-width: 800px; width: 100%;">
      <thead class="table-light">
        <tr>
          <th scope="col" style="width: 13.5%; min-width: 100px;" class="text-center align-middle">Matricula</th>
          <th scope="col" style="width: 28%; min-width: 100px;" class="text-center align-middle">Nombre</th>
          <th scope="col" style="width: 10%; min-width: 100px;" class="text-center align-middle">Semestre</th>
          <th scope="col" style="width: 23.5%; min-width: 100px;" class="text-center align-middle">Correo Institucional</th>
          <th scope="col" style="width: 14%; min-width: 25px;" class="text-center align-middle">Inscripción</th>
          <th scope="col" style="width: 4%; min-width: 25px;"></th>
          <th scope="col" style="width: 7%; min-width: 25px;"></th>
        </tr>
      </thead>
      <tbody id="alumnoRegularTablaBody">
        <% for (let alumnoRegular of alumnosRegulares) { %>
          <tr>
            <th scope="row" class="text-center align-middle"><%= alumnoRegular.ivd_id %></th>
            <td class="text-center align-middle"><%= alumnoRegular.nombre %> <%= alumnoRegular.primer_apellido %> <%= alumnoRegular.segundo_apellido|| '' %></td>
            <td class="text-center align-middle"><%= alumnoRegular.semestre %></td>
            <td class="text-center align-middle"><%= alumnoRegular.correo_institucional %></td>
            <td class="text-center align-middle d-flex justify-content-center">
              <button class="btn btn-sm p-2 rounded-3 d-flex align-items-center justify-content-center <%= alumnoRegular.inscripcion_completada ? 'btn-success' : 'btn-warning text-dark' %>" 
                style="width: 70%; height: 1.5rem; color: white; border: none;">
                <%= alumnoRegular.inscripcion_completada ? 'Completa' : 'Incompleta' %>
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#viewModal"
                data-alumno-id="<%= alumnoRegular.ivd_id %>"
                data-alumno-nombre="<%= alumnoRegular.nombre %> <%= alumnoRegular.primer_apellido %> <%= alumnoRegular.segundo_apellido|| '' %>">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                  </svg>
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#alertaModal"
                data-alumno-id="<%= alumnoRegular.ivd_id %>"
                data-alumno-nombre="<%= alumnoRegular.nombre %> <%= alumnoRegular.primer_apellido %> <%= alumnoRegular.segundo_apellido|| '' %>">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                    <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
                  </svg>
              </button>
            </td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  <div class="d-flex align-items-center justify-content-between me-5 mb-3 flex-wrap">
    <h3 class="ms-5 text-decoration-underline ivd-text-red">Irregulares</h3>
    <div class="d-flex align-items-center flex-grow-1" style="max-width: 200px;">
      <input id="buscarAlumnoIrregular" class="form-control rounded-pill" type="search" placeholder="Buscar alumno" aria-label="Search"
            style="background-image:url('/images/search.svg');
                    background-repeat:no-repeat;
                    background-position: 1rem center; 
                    padding-left: 3rem; 
                    font-size: 1rem;
                    width: 100%;
                    border: 1px solid #84251C;">
    </div>
  </div>
  <div class="table-responsive mx-5 mb-5 rounded-5 flex-grow-1" style="min-height: 45vh; overflow: auto; background-color: white;">
    <table class="table table-hover" style="min-width: 800px; width: 100%;">
      <thead class="table-light">
        <tr>
          <th scope="col" style="width: 13.5%; min-width: 100px;" class="text-center align-middle">Matricula</th>
          <th scope="col" style="width: 28%; min-width: 100px;" class="text-center align-middle">Nombre</th>
          <th scope="col" style="width: 10%; min-width: 100px;" class="text-center align-middle">Semestre</th>
          <th scope="col" style="width: 23.5%; min-width: 100px;" class="text-center align-middle">Correo Institucional</th>
          <th scope="col" style="width: 14%; min-width: 25px;" class="text-center align-middle">Inscripción</th>
          <th scope="col" style="width: 4%; min-width: 25px;"></th>
          <th scope="col" style="width: 7%; min-width: 25px;"></th>
        </tr>
      </thead>
      <tbody id="alumnoIrregularTablaBody">
        <% for (let alumnoIrregular of alumnosIrregulares) { %>
          <tr>
            <th scope="row" class="text-center align-middle"><%= alumnoIrregular.ivd_id %></th>
            <td class="text-center align-middle"><%= alumnoIrregular.nombre %> <%= alumnoIrregular.primer_apellido %> <%= alumnoIrregular.segundo_apellido|| '' %></td>
            <td class="text-center align-middle"><%= alumnoIrregular.semestre %></td>
            <td class="text-center align-middle"><%= alumnoIrregular.correo_institucional %></td>
            <td class="text-center align-middle d-flex justify-content-center">
              <button class="btn btn-sm p-2 rounded-3 d-flex align-items-center justify-content-center <%= (alumnoIrregular.inscripcion_completada ? 'btn-success' : (alumnoIrregular.asignada ? 'btn-warning text-dark' : 'ivd-bg-red')) %>" 
                style="width: 70%; height: 1.5rem; color: white; border: none;"> 
                <%= (alumnoIrregular.inscripcion_completada ? 'Completa' : (alumnoIrregular.asignada ? 'Incompleta' : 'No Asignada')) %>
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#viewModal"
                data-alumno-id="<%= alumnoIrregular.ivd_id %>"
                data-alumno-nombre="<%= alumnoIrregular.nombre %> <%= alumnoIrregular.primer_apellido %> <%= alumnoIrregular.segundo_apellido|| '' %>">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                  </svg>
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#editModal"
                data-alumno-id="<%= alumnoIrregular.ivd_id %>"
                data-alumno-nombre="<%= alumnoIrregular.nombre %> <%= alumnoIrregular.primer_apellido %> <%= alumnoIrregular.segundo_apellido|| '' %>">
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                    <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
                  </svg>
              </button>
            </td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>
  </main>
</div>
</div>

<!-- Modal para consultar horario -->
<div class="modal fade" id="viewModal" tabindex="-1" aria-labelledby="viewModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content rounded-5" style="background-color: #f0f0f0; max-width: 95vw;">
      <div class="modal-header justify-content-center border-bottom-0">
        <h5 class="modal-title ivd-text-red" id="viewModalLabel"><b>Estás viendo el horario de un alumno</b></h5>
      </div>
      <div class="modal-body px-4 materia-scroll">
        <div class="rounded-5 py-1" style="background-color: white;">
          <div class="d-flex" style="height: fit-content;">
            <!-- Columna de la izquierda -->
            <div class="p-3 ps-0 flex-grow-1" style="width: 66.66%; height: fit-content;">
              <div class="mb-4" style="min-height: fit-content;">
                <div class="mt-1 mb-4">
                  <div class="d-flex align-items-end" style="border-bottom: 3px solid #84251C; width: fit-content; margin-top: -10px;">
                    <p class="fs-5 m-0 ms-2 me-3" id="viewModalAlumnoNombre"></p>
                  </div>
                </div>
                <div class="bg-white rounded-5 p-0 flex-grow-1 ms-3 border ivd-border-red" style=" display: block; height: fit-content; overflow-y: auto;">
                  <!-- Contenido del horario principal -->
                  <table class="table custom-table p-0 table-striped table-bordered table-hover mb-0"
                    style="font-size: 0.85rem; border-collapse: separate !important; border-spacing: 0; border-radius: 1rem;"
                  >
                    <thead class="table-danger rounded-top">
                      <tr class="text-center rounded-top">
                        <!-- Titulo de columnas -->
                        <th class="hour-col">Hora</th>
                        <th>Lunes</th>
                        <th>Martes</th>
                        <th>Miércoles</th>
                        <th>Jueves</th>
                        <th>Viernes</th>
                      </tr>
                    </thead>
                    <tbody id="viewModalTableBody">
                    </tbody>
                  </table>
                </div>
              </div> 
            </div>
            <!-- Columna de la derecha -->
            <div class="p-3 flex-grow-1 d-flex flex-column mt-5" style="width: 33.33%; height: auto;">
              <!-- Botones de los días -->
               <div class="d-flex justify-content-center gap-4 mt-3 mb-4">
                <button type="button" class="btn btn-circle-custom day-btn" data-day="LU">LU</button>
                <button type="button" class="btn btn-circle-custom day-btn" data-day="MA">MA</button>
                <button type="button" class="btn btn-circle-custom day-btn" data-day="MI">MI</button>
                <button type="button" class="btn btn-circle-custom day-btn" data-day="JU">JU</button>
                <button type="button" class="btn btn-circle-custom day-btn" data-day="VI">VI</button>
                </div>
              <!-- Clases -->
              <div id="classes-container" class="flex-grow-1 overflow-y-auto">
              </div>
            </div>
          </div>
        </div>
      </div>
      <div class="modal-footer justify-content-center" style="background-color: #f0f0f0;">
        <button class="btn btn-primary rounded-pill px-4 mx-4" 
          style="background-color: #84251C; border: none;"
          data-bs-dismiss="modal">
          Aceptar
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para alertar el cambio de estatus -->
<div class="modal fade" id="alertaModal" tabindex="-1" aria-labelledby="alertaModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-md modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content rounded-5" style="background-color: #f0f0f0; max-width: 95vw;">
      <div class="modal-header justify-content-center border-bottom-0">
        <h5 class="modal-title ivd-text-red" id="alertaModalLabel"><b>Cambio de estatus</b></h5>
      </div>
      <div class="modal-body py-0">
        <div class="rounded-5 py-1 d-flex justify-content-center align-items-center text-center" style="background-color: white;">
          <p class="my-2 mx-1">Usted está intentando cambiar el estatus del alumno de regular a 
            <b class="ivd-text-red">irregular</b>. ¿Desea proceder con esta acción?
          </p>
        </div>
      </div>
      <div class="modal-footer justify-content-center border-top-0" style="background-color: #f0f0f0;">
        <button type="button" class="btn btn-secondary rounded-pill px-4 mx-4" 
          style="background-color: white; border: 1px solid #84251C; color: #84251C;" 
          data-bs-dismiss="modal">
          Cancelar
        </button>
        <button class="btn btn-primary rounded-pill px-4 mx-4" 
          style="background-color: #84251C; border: none;"
          id="btnConfirmarCambio"
        >
          Aceptar
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Modal para modificar horario -->
<div class="modal fade" id="editModal" tabindex="-1" aria-labelledby="editModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
    <div class="modal-content rounded-5" style="background-color: #f0f0f0; max-width: 95vw;">
      <div class="modal-header justify-content-center">
        <h5 class="modal-title ivd-text-red" id="editModalLabel"><b>Estás modificando el horario de un alumno</b></h5>
      </div>
      <div class="modal-body px-4 materia-scroll">
        <div class="mt-4">
          <div class="d-flex align-items-end" style="border-bottom: 3px solid #84251C; width: fit-content; margin-top: -10px;">
            <p class="fs-5 m-0 ms-2 me-3" id="editModalAlumnoNombre"></p>
          </div>
        </div>
        <!-- horario y grupos -->
        <div class="d-flex flex-column align-items-center pt-4 w-100">
          <p class="w-100 text-center mb-3">Materias presentadas en gris no se pueden modificar por el alumno</p>
          <div class="rounded-4 mb-4" style="background-color: white; width: 70%; height: fit-content; overflow: hidden;">
            <table class="table custom-table p-0 table-striped table-bordered table-hover mb-0 rounded-4" 
            style="font-size: 0.85rem; border-collapse: separate !important; border-spacing: 0; border-radius: 1rem;"
            >
              <thead class="table-danger rounded-top">
                <tr class="text-center rounded-top">
                  <!-- Titulo de columnas -->
                  <th class="hour-col">Hora</th>
                  <th>Lunes</th>
                  <th>Martes</th>
                  <th>Miércoles</th>
                  <th>Jueves</th>
                  <th>Viernes</th>
                </tr>
              </thead>
              <tbody id="editModalTableBody">
              </tbody>
            </table>
          </div>
          <div class="ivd-bg-red w-100" style="height: 2px; margin-left: 12px;"></div>
          <div class="w-100 d-flex align-items-center" style="height: 500px;">
            <div class="w-50 h-100 px-5 py-4 d-flex flex-column align-items-center">
              <p class="w-100 ms-3 fw-semibold" style="font-size: 1.2rem;">Materias Seleccionadas</p>
              <div id="materiasSeleccionadas" class="w-100 pb-3 alumno-scroll-gris">
                <!-- mateiras seleccionadas -->
              </div>
            </div>
            <div style="background-color:lightgrey; width: 3px; height: 80%;"></div>
            <div class="w-50 h-100 px-5 py-4 d-flex flex-column align-items-center">
              <p class="w-100 ms-3 fw-semibold" style="font-size: 1.2rem;">Materias Disponibles</p>
              <div class="w-100 d-flex justify-content-between">
                <div class="dropdown">
                  <button id="btnSemestre" class="btn border dropdown-toggle rounded-pill ivd-border-red" 
                          type="button" data-bs-toggle="dropdown" style="background-color: white;">
                      Semestre
                  </button>
                  <ul class="dropdown-menu">
                    <li class="dropdown-item" data-semestre="semestre">Semestre</li>
                    <li class="dropdown-item" data-semestre="s1">1°ro</li>
                    <li class="dropdown-item" data-semestre="s2">2°nd</li>
                    <li class="dropdown-item" data-semestre="s3">3°ro</li>
                    <li class="dropdown-item" data-semestre="s4">4°to</li>
                    <li class="dropdown-item" data-semestre="s5">5°to</li>
                    <li class="dropdown-item" data-semestre="s6">6°to</li>
                    <li class="dropdown-item" data-semestre="s7">7°mo</li>
                    <li class="dropdown-item" data-semestre="s8">8°vo</li>
                    <li class="dropdown-item" data-semestre="s9">9°no</li>
                  </ul>
                </div>
              </div>
              <div id="materiasDisponibles" class="w-100 pb-3 alumno-scroll-gris">
                <!-- materias disponibles -->
              </div>
            </div>
          </div>
        </div>  
      </div>
      <div class="modal-footer justify-content-center" style="background-color: #f0f0f0;">
        <button class="btn btn-primary rounded-pill px-4 mx-4" 
          style="background-color: #84251C; border: none;"
          data-bs-dismiss="modal">
          Aceptar
        </button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="/js/coordinador.js"></script>
<% if (msg) { %>
  <script>
    // Solo cuando el html carga completamente
    document.addEventListener('DOMContentLoaded', () => {
      // Crea una instancia de nuevo modal
      var myModal = new bootstrap.Modal(document.getElementById('msgModal'));
      // Muestra el nuevo modal
      myModal.show();
    });
  </script>
<% } %>
<script>
  // Para modal de consultar horario
  document.getElementById('viewModal').addEventListener('shown.bs.modal', (event) => {
    const button = event.relatedTarget;
    const alumno_id = button.getAttribute('data-alumno-id');
    const alumno_nombre = button.getAttribute('data-alumno-nombre');
    console.log(alumno_id);
    document.getElementById('viewModalAlumnoNombre').innerHTML = alumno_nombre;
    fetch(`/coordinador/alumnos/consultar-horario/${alumno_id}`, {
      method: 'GET',
    }).then((res) => {
      return res.json();
    }).then((data) => {
      console.log(data.materias_resultado);
      // Tabla de horario
      const colores = ['bg-primary-subtle', 'bg-success-subtle ','bg-warning-subtle ','bg-danger-subtle','bg-info-subtle','bg-secondary-subtle','bg-light'];
      const materiasColor = {};
      let colorIndex = 0;
      let html_container_tabla = '';
      let horaPorGrp = {};
      const bloque_tiempo = data.bloque_tiempo;
      
      const horario = { 
        Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
      };
      
      if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
        data.materias_resultado.forEach(materia => {
          // Asignar color único por materia
          if (!materiasColor[materia.grupo_id]) {
            materiasColor[materia.grupo_id] = colores[colorIndex % colores.length];
            colorIndex++;
          }
          horaPorGrp[materia.grupo_id] = {};

          let indexDia = 0;
          materia.dias.forEach(dia => {
            horaPorGrp[materia.grupo_id][dia] = [];
            const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
            const bloqueTiempoIds = [];
            let indexBloque = 0;
            for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
              
              if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                bloqueTiempoIds.push(i);
                indexBloque++;
              } else {
                bloqueTiempoIds.push(null);
              }
            }
            
            if (horario[diaNombre]) {
              let inicioBloque = bloqueTiempoIds[0];
              let rowSpan = 0;
              for (let bloqueTiempoId of bloqueTiempoIds) {
                if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                  if (rowSpan > 0) {
                    if (bloqueTiempoId === null) {
                      rowSpan --;
                    }
                    horario[diaNombre][inicioBloque % 24 + 13] = {
                      grupo_id: materia.grupo_id,
                      rowspan: rowSpan,
                      nombre: materia.materia_nombre,
                      color: materiasColor[materia.grupo_id],
                      salon: materia.salon_numero,
                      profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                      hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                    };
                    <!-- Bloques intermedios como ocupados -->
                    for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                      horario[diaNombre][b % 24 + 13] = 'ocupar';
                    }
                    rowSpan = 0;
                  }
                } else {
                  if (rowSpan === 0) {
                    inicioBloque = bloqueTiempoId;
                  }
                  rowSpan ++;
                }
              }
            }
            indexDia ++;
          });
        });
      }
      for (let bloque = 14; bloque < 32; bloque++) {
        const hora = Math.floor(bloque / 2);
        const minutos = bloque % 2 === 0 ? '00' : '30';
        let horaFormato;
        if (bloque % 2 !== 0) {
          horaFormato = `${hora}:${minutos} - ${hora + 1}:00`;
        } else {
          horaFormato = `${hora}:${minutos} - ${hora}:30`;
        }
        html_container_tabla += `
          <tr style="max-height: 1rem;">
            <th class="hour-cell text-center align-middle">${horaFormato}</th>`;
            ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
              if (horario[dia][bloque] === 'ocupar') return;
              if (horario[dia][bloque]) { 
                const clase = horario[dia][bloque];
                horaPorGrp[clase.grupo_id][dia].push(clase.hora); 
                html_container_tabla += `
                  <td class="text-black text-center align-middle ${clase.color}" 
                      rowspan="${clase.rowspan + 1}"
                      data-bs-toggle="tooltip" 
                      data-bs-placement="top"`;
                      if (clase.salon === 9999) {
                        html_container_tabla += `
                          title="${clase.hora} | Salon: No asignado | Prof: ${clase.profesor}">`;
                      } else {
                        html_container_tabla += `
                          title="${clase.hora} | Salon: ${clase.salon} | Prof: ${clase.profesor}">`
                      }
                    html_container_tabla += `
                    ${clase.nombre}
                  </td>`;
              } else {
                html_container_tabla += `
                  <td class="empty-slot"></td>`;
              }
            })
        html_container_tabla += `
          </tr>`;
      }

      document.getElementById('viewModalTableBody').innerHTML = html_container_tabla;
      
      // Tarjetas de materias
      let html_container_materias = '';
      for (let materia_resultado of data.materias_resultado) {
        html_container_materias += `
        <div class="bg-white rounded-5 py-2 mb-3 class-card border ivd-border-red" 
          data-days="${materia_resultado.dias.map(dia => dia.substring(0,2).toUpperCase()).join(',')}"
          data-horas="${JSON.stringify(horaPorGrp[materia_resultado.grupo_id]).replace(/"/g, '&quot;')}"
        >
          <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%;">
            <p class="m-0 me-3 hora-card"></p>
            <p class="m-0" style="color: #84251C;">(${materia_resultado.dias.join(', ')})</p>
          </div>
          <div class="d-flex justify-content-center my-3">
            <div style="border-bottom: 3px solid #84251C; width: 100%;"></div>
          </div>
          <p class="fw-semibold text-center">${materia_resultado.materia_nombre}</p>
          <p class="text-center mb-3">
            Salón: `;
            if (materia_resultado.salon_numero === 9999) {
              html_container_materias += `
              No asignado |`;
            } else {
              html_container_materias += `
              ${materia_resultado.salon_numero} |`
            }
            html_container_materias += ` 
            ${materia_resultado.profesor_nombre} 
            ${materia_resultado.profesor_primer_apellido}
            ${materia_resultado.profesor_segundo_apellido}
          </p>
        </div>`;
      }
      document.getElementById('classes-container').innerHTML = html_container_materias;

      const dayButtons = document.querySelectorAll('.day-btn');
      const classCards = document.querySelectorAll('.class-card');  

      function filterClassesByDay(day) {
          classCards.forEach(card => {
            const diasCorto = card.getAttribute("data-days")       // ej. "LU,JU"
                                .split(",");
            const horasObj  = JSON.parse(card.getAttribute("data-horas"));
            const idx       = diasCorto.indexOf(day);              // 0 para LU, 1 para JU, etc.

            if (idx === -1) {
              card.style.display = "none";
              return;
            }

            card.style.display = "block";
            const horasArray = Object.values(horasObj)[idx] || [];
            card.querySelector(".hora-card").textContent = horasArray.join(", ");
          });

        //Hover cuando se selecciona
        dayButtons.forEach(btn => {
          if (btn.getAttribute('data-day') === day) {
            btn.style.backgroundColor = '#84251C';
            btn.style.color = 'white';
            btn.style.borderColor = '#84251C';
          } else {
            btn.style.backgroundColor = 'white';
            btn.style.color = 'black';
            btn.style.borderColor = '#84251C';
          }
        });
      }
      dayButtons.forEach(button => {
        button.addEventListener('click', function() {
          filterClassesByDay(this.getAttribute('data-day')); });
        button.addEventListener('mouseover', function() { });
        button.addEventListener('mouseout', function() { });
      });
      //Muestra siempre el lunes
      filterClassesByDay('LU');
    }).catch((error) => {
      console.log(error);
    });
  });
  let alumno_id;

// Para modal de alertar cambio de estatus
document.getElementById('alertaModal').addEventListener('show.bs.modal', function (event) {
  const button = event.relatedTarget;
  const alumnoId = button.getAttribute('data-alumno-id');
  const alumnoNombre = button.getAttribute('data-alumno-nombre');
  const btnAceptar = document.getElementById('btnConfirmarCambio');

  // Eliminar listener previo si ya existía
  const newBtnAceptar = btnAceptar.cloneNode(true);
  btnAceptar.parentNode.replaceChild(newBtnAceptar, btnAceptar);

  // Agregar el listener nuevo sin duplicaciones
  newBtnAceptar.addEventListener('click', () => {
    fetch('/coordinador/alumnos/cambiar-estatus', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ 
        alumno_id: alumnoId
      })
    }).then((res) => {
      return res.json();
    }).then((data) => {
      let html_container_alumnos_regulares = '';
      for (let alumnoRegular of data.alumnosRegulares) {
        html_container_alumnos_regulares += `
          <tr>
            <th scope="row" class="text-center align-middle">${alumnoRegular.ivd_id}</th>
            <td class="text-center align-middle">${alumnoRegular.nombre} ${alumnoRegular.primer_apellido} ${alumnoRegular.segundo_apellido|| ''}</td>
            <td class="text-center align-middle">${alumnoRegular.semestre}</td>
            <td class="text-center align-middle">${alumnoRegular.correo_institucional}</td>
            <td class="text-center align-middle d-flex justify-content-center">
              <button class="btn btn-sm p-2 rounded-3 d-flex align-items-center justify-content-center ${alumnoRegular.inscripcion_completada ? 'btn-success' : 'btn-warning text-dark'}" 
                style="width: 70%; height: 1.5rem; color: white; border: none;">
                ${alumnoRegular.inscripcion_completada ? 'Completa' : 'Incompleta'}
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#viewModal"
                data-alumno-id="${alumnoRegular.ivd_id}"
                data-alumno-nombre="${alumnoRegular.nombre} ${alumnoRegular.primer_apellido} `;
                if (alumnoRegular.segundo_apellido !== null) {
                  html_container_alumnos_regulares += `${alumnoRegular.segundo_apellido}">`
                } else {
                  html_container_alumnos_regulares += `">`
                }
        html_container_alumnos_regulares +=`
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                    <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                    <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                  </svg>
              </button>
            </td>
            <td class="text-center align-middle">
              <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                data-bs-toggle="modal" 
                data-bs-target="#alertaModal"
                data-alumno-id="${alumnoRegular.ivd_id}"
                data-alumno-nombre="${alumnoRegular.nombre} ${alumnoRegular.primer_apellido} `;
                if (alumnoRegular.segundo_apellido !== null) {
                  html_container_alumnos_regulares += `${alumnoRegular.segundo_apellido}">`
                } else {
                  html_container_alumnos_regulares += `">`
                }
        html_container_alumnos_regulares += `
                  <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                    <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
                  </svg>
              </button>
            </td>
          </tr>`;
        }
        document.getElementById('alumnoRegularTablaBody').innerHTML = html_container_alumnos_regulares;
        let html_container_alumnos_irregulares = '';
        for (let alumnoIrregular of data.alumnosIrregulares) {
          html_container_alumnos_irregulares += `
            <tr>
              <th scope="row" class="text-center align-middle">${alumnoIrregular.ivd_id}</th>
              <td class="text-center align-middle">${alumnoIrregular.nombre} ${alumnoIrregular.primer_apellido} ${alumnoIrregular.segundo_apellido|| ''}</td>
              <td class="text-center align-middle">${alumnoIrregular.semestre}</td>
              <td class="text-center align-middle">${alumnoIrregular.correo_institucional}</td>
              <td class="text-center align-middle d-flex justify-content-center">
              <button class="btn btn-sm p-2 rounded-3 d-flex align-items-center justify-content-center ${(alumnoIrregular.inscripcion_completada ? 'btn-success' : (alumnoIrregular.asignada ? 'btn-warning text-dark' : 'ivd-bg-red'))}" 
                style="width: 70%; height: 1.5rem; color: white; border: none;"> 
                ${(alumnoIrregular.inscripcion_completada ? 'Completa' : (alumnoIrregular.asignada ? 'Incompleta' : 'No Asignada'))}
              </button>
              </td>
              <td class="text-center align-middle">
                <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                  style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                  data-bs-toggle="modal" 
                  data-bs-target="#viewModal"
                  data-alumno-id="${alumnoIrregular.ivd_id}"
                  data-alumno-nombre="${alumnoIrregular.nombre} ${alumnoIrregular.primer_apellido} `;
                  if (alumnoIrregular.segundo_apellido !== null) {
                    html_container_alumnos_irregulares += `${alumnoIrregular.segundo_apellido}">`
                  } else {
                    html_container_alumnos_irregulares += `">`
                  }
          html_container_alumnos_irregulares +=`
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eye-fill" viewBox="0 0 16 16">
                      <path d="M10.5 8a2.5 2.5 0 1 1-5 0 2.5 2.5 0 0 1 5 0"/>
                      <path d="M0 8s3-5.5 8-5.5S16 8 16 8s-3 5.5-8 5.5S0 8 0 8m8 3.5a3.5 3.5 0 1 0 0-7 3.5 3.5 0 0 0 0 7"/>
                    </svg>
                </button>
              </td>
              <td class="text-center align-middle">
                <button class="btn btn-sm p-0 d-flex align-items-center justify-content-center" 
                  style="width: 1.5rem; height: 1.5rem; border-radius: 50%; background-color: #84251c; color: white; border: none;"
                  data-bs-toggle="modal" 
                  data-bs-target="#editModal"
                  data-alumno-id="${alumnoIrregular.ivd_id}"
                  data-alumno-nombre="${alumnoIrregular.nombre} ${alumnoIrregular.primer_apellido} `;
                  if (alumnoIrregular.segundo_apellido !== null) {
                    html_container_alumnos_irregulares += `${alumnoIrregular.segundo_apellido}">`
                  } else {
                    html_container_alumnos_irregulares += `">`
                  }
          html_container_alumnos_irregulares += `
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-fill" viewBox="0 0 16 16">
                      <path d="M12.854.146a.5.5 0 0 0-.707 0L10.5 1.793 14.207 5.5l1.647-1.646a.5.5 0 0 0 0-.708zm.646 6.061L9.793 2.5 3.293 9H3.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.5h.5a.5.5 0 0 1 .5.5v.207zm-7.468 7.468A.5.5 0 0 1 6 13.5V13h-.5a.5.5 0 0 1-.5-.5V12h-.5a.5.5 0 0 1-.5-.5V11h-.5a.5.5 0 0 1-.5-.5V10h-.5a.5.5 0 0 1-.175-.032l-.179.178a.5.5 0 0 0-.11.168l-2 5a.5.5 0 0 0 .65.65l5-2a.5.5 0 0 0 .168-.11z"/>
                    </svg>
                </button>
              </td>
            </tr>`;
        }
        document.getElementById('alumnoIrregularTablaBody').innerHTML = html_container_alumnos_irregulares;
    }).catch((error) => {
      console.log(error);
    });
  });

  // Configurar atributos para el siguiente modal
  newBtnAceptar.setAttribute('data-bs-toggle', 'modal');
  newBtnAceptar.setAttribute('data-bs-target', '#editModal');
  newBtnAceptar.setAttribute('data-alumno-id', alumnoId);
  newBtnAceptar.setAttribute('data-alumno-nombre', alumnoNombre);
});


  // Para modal de editar horario
  document.getElementById('editModal').addEventListener('shown.bs.modal', (event) => {
    const button = event.relatedTarget;
    alumno_id = button.getAttribute('data-alumno-id');
    const alumno_nombre = button.getAttribute('data-alumno-nombre');
    document.getElementById('editModalAlumnoNombre').innerHTML = alumno_nombre;
    fetch(`/coordinador/alumnos/modificar-horario/${alumno_id}`, {
      method: 'GET',
    }).then((res) => {
      return res.json();
    }).then((data) => {
      // Tabla de horario
      const colores = ['bg-primary-subtle', 'bg-success-subtle ','bg-warning-subtle ','bg-danger-subtle','bg-info-subtle'];
      const materiasColor = {};
      let html_container_tabla = '';
      let colorIndex = 0;
      let horaPorGrp = {};
      const bloque_tiempo = data.bloque_tiempo;
      
      const horario = { 
        Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
      };
      
      if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
        data.materias_resultado.forEach(materia => {
          // Asignar color único por materia
          if (!materiasColor[materia.grupo_id]) {
            if (materia.obligatorio === true) {
                materiasColor[materia.grupo_id] = 'bg-secondary';
            } else {
              materiasColor[materia.grupo_id] = colores[colorIndex % colores.length];
              colorIndex++;
            }
          }
          horaPorGrp[materia.grupo_id] = {};

          let indexDia = 0;
          materia.dias.forEach(dia => {
            horaPorGrp[materia.grupo_id][dia] = [];
            const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
            const bloqueTiempoIds = [];
            let indexBloque = 0;
            for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
              
              if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                bloqueTiempoIds.push(i);
                indexBloque++;
              } else {
                bloqueTiempoIds.push(null);
              }
            }
            
            if (horario[diaNombre]) {
              let inicioBloque = bloqueTiempoIds[0];
              let rowSpan = 0;
              for (let bloqueTiempoId of bloqueTiempoIds) {
                if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                  if (rowSpan > 0) {
                    if (bloqueTiempoId === null) {
                      rowSpan --;
                    }
                    horario[diaNombre][inicioBloque % 24 + 13] = {
                      grupo_id: materia.grupo_id,
                      rowspan: rowSpan,
                      nombre: materia.materia_nombre,
                      color: materiasColor[materia.grupo_id],
                      salon: materia.salon_numero,
                      profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                      hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                    };
                    for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                      horario[diaNombre][b % 24 + 13] = 'ocupar';
                    }
                    rowSpan = 0;
                  }
                } else {
                  if (rowSpan === 0) {
                    inicioBloque = bloqueTiempoId;
                  }
                  rowSpan ++;
                }
              }
            }
            indexDia ++;
          });
        });
      }
      for (let bloque = 14; bloque < 32; bloque++) {
        const hora = Math.floor(bloque / 2);
        const minutos = bloque % 2 === 0 ? '00' : '30';
        let horaFormato;
        if (bloque % 2 !== 0) {
          horaFormato = `${hora}:${minutos} - ${hora + 1}:00`;
        } else {
          horaFormato = `${hora}:${minutos} - ${hora}:30`;
        }
        html_container_tabla += `
          <tr style="max-height: 1rem;">
            <th class="hour-cell text-center align-middle">${horaFormato}</th>`;
            ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
              if (horario[dia][bloque] === 'ocupar') return;
              if (horario[dia][bloque]) { 
                const clase = horario[dia][bloque];
                horaPorGrp[clase.grupo_id][dia].push(clase.hora); 
                html_container_tabla += `
                  <td class="text-black text-center align-middle ${clase.color}" 
                      rowspan="${clase.rowspan + 1}"
                      data-bs-toggle="tooltip" 
                      data-bs-placement="top"`;
                      if (clase.salon === 9999) {
                        html_container_tabla += `
                          title="${clase.hora} | Salon: No asignado | Prof: ${clase.profesor}">`;
                      } else {
                        html_container_tabla += `
                          title="${clase.hora} | Salon: ${clase.salon} | Prof: ${clase.profesor}">`
                      }
                    html_container_tabla += `
                    ${clase.nombre}
                  </td>`;
              } else {
                html_container_tabla += `
                  <td class="empty-slot"></td>`;
              }
            })
        html_container_tabla += `
          </tr>`;
      }

      document.getElementById('editModalTableBody').innerHTML = html_container_tabla;
      
      // Para materias seleccionadas
      let html_container_materias_seleccionadas = ``;
      let numMateria = 1;
        for (let materia_resultado of data.materias_resultado) {
            html_container_materias_seleccionadas += `
                <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                    <div class="w-100 d-flex my-2">
                    <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`
            for (let i = 0; i < materia_resultado.dias.length; i++) { 
                html_container_materias_seleccionadas += `
                          <p class="m-0 me-2">
                            ${Object.values(horaPorGrp[materia_resultado.grupo_id][materia_resultado.dias[i]]).join(", ")}
                          </p>`;
                if (i !== materia_resultado.dias.length - 1) {
                    html_container_materias_seleccionadas += `
                            <p class="m-0 me-3 ivd-text-red">
                              (${materia_resultado.dias[i]})  
                            </p>`;
                } else { 
                    html_container_materias_seleccionadas += `
                            <p class="m-0 ivd-text-red">
                              (${materia_resultado.dias[i]})  
                            </p>`;
                }
            }
            html_container_materias_seleccionadas += `
                </div>
                     <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                          <button class="btn-eliminar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                            style="
                            width: 1.3rem;
                            height: 1.3rem;
                            border-radius: 50%;
                            background-color: #84251c;
                            color: white;
                            border: none;
                            "
                            data-grupo-id="${materia_resultado.grupo_id}"
                            data-horas="${JSON.stringify(horaPorGrp).replace(/"/g, '&quot;')}"
                            data-alumno-id="${alumno_id}"
                            >
                            <svg xmlns="http://www.w3.org/2000/svg" width="13" height="13" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                            </svg>
                          </button>
                      </div>
                    </div>
                    <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                    <p class="fw-semibold my-3">${materia_resultado.materia_nombre}</p>
                    <p class="mb-3">
                    Salon:`;
            if (materia_resultado.salon_numero === 9999) {
                html_container_materias_seleccionadas += `
                    No asignado | `;
            } else { 
                html_container_materias_seleccionadas += `
                    ${materia_resultado.salon_numero} | `;
            }
            html_container_materias_seleccionadas += `
                        ${materia_resultado.profesor_nombre} 
                        ${materia_resultado.profesor_primer_apellido}
                        ${materia_resultado.profesor_segundo_apellido}
                    </p>
                    <div class="ivd-bg-red w-100" style="height: 0.5px;"></div>
                    <div class="btn-group my-2" role="group" aria-label="Basic radio toggle button group">
                      <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnObligatorio${numMateria}" autocomplete="off" 
                        ${materia_resultado.obligatorio ? 'checked' : ''}
                        data-grupo-id="${materia_resultado.grupo_id}"
                        data-alumno-id="${alumno_id}"
                      >
                      <label class="btn btn-outline-danger rounded-start-pill" for="btnObligatorio${numMateria}" style="width: 7rem">Obligatoria</label>

                      <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnOpcional${numMateria}" autocomplete="off" 
                        ${!materia_resultado.obligatorio ? 'checked' : ''}
                        data-grupo-id="${materia_resultado.grupo_id}"
                        data-alumno-id="${alumno_id}"
                      >
                      <label class="btn btn-outline-danger rounded-end-pill" for="btnOpcional${numMateria}" style="width: 7rem">Opcional</label>
                    </div>
                </div>`
            numMateria ++;
        } 
      document.getElementById('materiasSeleccionadas').innerHTML = html_container_materias_seleccionadas;

      // Para materias disponibles
      let horaPorGrp2 = {};
      const horario2 = { 
        Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
      };
      
      if (typeof data.materias_disponibles_semestre !== 'undefined' && Array.isArray(data.materias_disponibles_semestre)) {
        data.materias_disponibles_semestre.forEach(materia => {
          horaPorGrp2[materia.grupo_id] = {};
          let indexDia = 0;
          materia.dias.forEach(dia => {
            horaPorGrp2[materia.grupo_id][dia] = [];
            const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
            const bloqueTiempoIds = [];
            let indexBloque = 0;
            for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
              
              if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                bloqueTiempoIds.push(i);
                indexBloque++;
              } else {
                bloqueTiempoIds.push(null);
              }
            }
            
            if (horario2[diaNombre]) {
              let inicioBloque = bloqueTiempoIds[0];
              let rowSpan = 0;
              for (let bloqueTiempoId of bloqueTiempoIds) {
                if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                  if (rowSpan > 0) {
                    if (bloqueTiempoId === null) {
                      rowSpan --;
                    }
                    horario2[diaNombre][inicioBloque % 24 + 13] = {
                      grupo_id: materia.grupo_id,
                      rowspan: rowSpan,
                      nombre: materia.materia_nombre,
                      salon: materia.salon_numero,
                      profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                      hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                    };
                    for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                      horario2[diaNombre][b % 24 + 13] = 'ocupar';
                    }
                    rowSpan = 0;
                  }
                } else {
                  if (rowSpan === 0) {
                    inicioBloque = bloqueTiempoId;
                  }
                  rowSpan ++;
                }
              }
            }
            indexDia ++;
          });
        });
      }
      for (let bloque = 14; bloque < 32; bloque++) {
            ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
              if (horario2[dia][bloque] === 'ocupar') return;
              if (horario2[dia][bloque]) { 
                const clase = horario2[dia][bloque];
                horaPorGrp2[clase.grupo_id][dia].push(clase.hora); 
              }
            })
      }
      let html_container_materias_disponibles = ``;
        for (let materia_disponible of data.materias_disponibles_semestre) { 
            html_container_materias_disponibles += `
            <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                <div class="w-100 d-flex my-2">
                    <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`
            for (let i = 0; i < materia_disponible.dias.length; i++) { 
                html_container_materias_disponibles += `
                          <p class="m-0 me-2">
                            ${Object.values(horaPorGrp2[materia_disponible.grupo_id][materia_disponible.dias[i]]).join(", ")}
                          </p>`;
                if (i !== materia_disponible.dias.length - 1) {
                    html_container_materias_disponibles += `
                            <p class="m-0 me-3 ivd-text-red">
                              (${materia_disponible.dias[i]})  
                            </p>`;
                } else { 
                    html_container_materias_disponibles += `
                            <p class="m-0 ivd-text-red">
                              (${materia_disponible.dias[i]})  
                            </p>`;
                }
            }
            html_container_materias_disponibles += `
            </div>
                <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                    <button class="btn-agregar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                    style="
                        width: 1.3rem;
                        height: 1.3rem;
                        border-radius: 50%;
                        background-color: #84251c;
                        color: white;
                        border: none;
                    "
                    data-grupo-id="${materia_disponible.grupo_id}"
                    data-alumno-id="${alumno_id}"
                    data-horas="${JSON.stringify(horaPorGrp2).replace(/"/g, '&quot;')}"
                    >
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                        </svg>
                    </button>
                </div>
            </div>
            <div class="ivd-bg-red w-100" style="height: 1px;"></div>
            <p class="fw-semibold my-3">${materia_disponible.materia_nombre}</p>
            <p class="mb-3">
                    Salon:`;
            if (materia_disponible.salon_numero === 9999) {
                html_container_materias_disponibles += `
                    No asignado | `;
            } else { 
                html_container_materias_disponibles += `
                    ${materia_disponible.salon_numero} | `;
            }
            html_container_materias_disponibles += `
                ${materia_disponible.profesor_nombre} 
                ${materia_disponible.profesor_primer_apellido}
                ${materia_disponible.profesor_segundo_apellido}
            </p>
            </div>`;
        }
        document.getElementById('materiasDisponibles').innerHTML = html_container_materias_disponibles;
        reagregarEventListeners();
    }).catch((error) => {
      console.log(error);
    });

    let semestre = 'semestre';
    // Cuando se presiona un elemento del dropdown
    document.querySelectorAll('.dropdown-item').forEach(item => {
        item.addEventListener('click', function () {
            semestre = this.getAttribute("data-semestre");
            fetch(`/coordinador/alumnos/modificar-horario/materias-disponibles/${semestre}/${alumno_id}`, {
                method: 'GET',
            }).then((res) => { 
                return res.json(); 
            }).then((data) => {
                if (semestre == 's1') {
                    document.getElementById('btnSemestre').innerHTML = '1°ro';
                } else if (semestre == 's2') {
                    document.getElementById('btnSemestre').innerHTML = '2°do';
                } else if (semestre == 's3') {
                    document.getElementById('btnSemestre').innerHTML = '3°ro';
                } else if (semestre == 's4') {
                    document.getElementById('btnSemestre').innerHTML = '4°to';
                } else if (semestre == 's5') {
                    document.getElementById('btnSemestre').innerHTML = '5°to';
                } else if (semestre == 's6') {
                    document.getElementById('btnSemestre').innerHTML = '6°to';
                } else if (semestre == 's7') {
                    document.getElementById('btnSemestre').innerHTML = '7°mo';
                } else if (semestre == 's8') {
                    document.getElementById('btnSemestre').innerHTML = '8°vo';
                } else if (semestre == 's9') {
                    document.getElementById('btnSemestre').innerHTML = '9°no';
                } else if (semestre == 'semestre') {
                    document.getElementById('btnSemestre').innerHTML = 'Semestre';
                }
                let html_container = ``;
                let horaPorGrp2 = {};
                const bloque_tiempo = data.bloque_tiempo;
                const horario2 = { 
                  Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
                };
                
                if (typeof data.materias_disponibles !== 'undefined' && Array.isArray(data.materias_disponibles)) {
                  data.materias_disponibles.forEach(materia => {
                    horaPorGrp2[materia.grupo_id] = {};
                    let indexDia = 0;
                    materia.dias.forEach(dia => {
                      horaPorGrp2[materia.grupo_id][dia] = [];
                      const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
                      const bloqueTiempoIds = [];
                      let indexBloque = 0;
                      for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                        
                        if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                          bloqueTiempoIds.push(i);
                          indexBloque++;
                        } else {
                          bloqueTiempoIds.push(null);
                        }
                      }
                      
                      if (horario2[diaNombre]) {
                        let inicioBloque = bloqueTiempoIds[0];
                        let rowSpan = 0;
                        for (let bloqueTiempoId of bloqueTiempoIds) {
                          if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                            if (rowSpan > 0) {
                              if (bloqueTiempoId === null) {
                                rowSpan --;
                              }
                              horario2[diaNombre][inicioBloque % 24 + 13] = {
                                grupo_id: materia.grupo_id,
                                rowspan: rowSpan,
                                nombre: materia.materia_nombre,
                                salon: materia.salon_numero,
                                profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                                hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                              };
                              for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                                horario2[diaNombre][b % 24 + 13] = 'ocupar';
                              }
                              rowSpan = 0;
                            }
                          } else {
                            if (rowSpan === 0) {
                              inicioBloque = bloqueTiempoId;
                            }
                            rowSpan ++;
                          }
                        }
                      }
                      indexDia ++;
                    });
                  });
                }
                for (let bloque = 14; bloque < 32; bloque++) {
                      ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                        if (horario2[dia][bloque] === 'ocupar') return;
                        if (horario2[dia][bloque]) { 
                          const clase = horario2[dia][bloque];
                          horaPorGrp2[clase.grupo_id][dia].push(clase.hora); 
                        }
                      })
                }
                for (let materia_disponible of data.materias_disponibles) { 
                    html_container += `
                    <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                      <div class="w-100 d-flex my-2">
                          <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`;

                    for (let i = 0; i < materia_disponible.dias.length; i++) { 
                        html_container += `
                                <p class="m-0 me-2">
                                    ${Object.values(horaPorGrp2[materia_disponible.grupo_id][materia_disponible.dias[i]]).join(", ")}
                                </p>`;
                        if (i !== materia_disponible.dias.length - 1) {
                            html_container += `
                                    <p class="m-0 me-3 ivd-text-red">
                                    (${materia_disponible.dias[i]})  
                                    </p>`;
                        } else { 
                            html_container += `
                                    <p class="m-0 ivd-text-red">
                                    (${materia_disponible.dias[i]})  
                                    </p>`;
                        }
                    }
                    html_container += `
                    </div>
                        <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                            <button class="btn-agregar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                            style="
                                width: 1.3rem;
                                height: 1.3rem;
                                border-radius: 50%;
                                background-color: #84251c;
                                color: white;
                                border: none;
                            "
                            data-grupo-id="${materia_disponible.grupo_id}"
                            data-alumno-id="${alumno_id}"
                            data-horas="${JSON.stringify(horaPorGrp2).replace(/"/g, '&quot;')}"
                            >
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                                <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                                </svg>
                            </button>
                        </div>
                      </div>
                      <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                      <p class="fw-semibold my-3">${materia_disponible.materia_nombre}</p>
                      <p class="mb-3">
                        Salon:`;
                    if (materia_disponible.salon_numero === 9999) {
                        html_container += `
                          No asignado | `;
                    } else { 
                        html_container += `
                          ${materia_disponible.salon_numero} | `;
                    }
                    html_container += `
                        ${materia_disponible.profesor_nombre} 
                        ${materia_disponible.profesor_primer_apellido}
                        ${materia_disponible.profesor_segundo_apellido}
                      </p>
                    </div>`;
                }
                document.getElementById('materiasDisponibles').innerHTML = html_container;
                // Reagregar los evenlisteners para que funcionen los botones
                reagregarEventListeners();
            }).catch((error) => {
                console.log(error);
            });
        });
    });

    function reagregarEventListeners() {
        document.querySelectorAll(".btn-eliminar").forEach((button) => {
            button.addEventListener("click", eliminar);
        });
        document.querySelectorAll(".btn-agregar").forEach((button) => {
            button.addEventListener("click", agregar);
        });
        document.querySelectorAll('input[name^="btnradio"]').forEach((radio) => {
          radio.addEventListener("change", obligacion);
        });
    }

    async function obligacion (event) {
      const radioSeleccionado = event.target; 
      const idSeleccionado = radioSeleccionado.id;
      const grupo_id = radioSeleccionado.getAttribute("data-grupo-id");
      const alumno_id = radioSeleccionado.getAttribute("data-alumno-id");
      const horasStr = button.getAttribute("data-horas");
      const horasObj = JSON.parse(horasStr);
      let obligatorio;
      if (idSeleccionado.startsWith("btnObligatorio")) {
        obligatorio = true;
      } else if (idSeleccionado.startsWith("btnOpcional")) {
        obligatorio = false;
      }
      fetch('/coordinador/alumnos/modificar-horario/modificar-obligacion', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ 
          obligatorio: obligatorio,
          grupo_id: grupo_id,
          alumno_id: alumno_id
        })
      }).then((res) => {
        return res.json();
      }).then((data) => {
        // Tabla de horario
        const colores = ['bg-primary-subtle', 'bg-success-subtle ','bg-warning-subtle ','bg-danger-subtle','bg-info-subtle'];
        const materiasColor = {};
        let html_container_tabla = '';
        let colorIndex = 0;
        let horaPorGrp = {};
        const bloque_tiempo = data.bloque_tiempo;
        
        const horario = { 
          Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
        };
        
        if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
          data.materias_resultado.forEach(materia => {
            // Asignar color único por materia
            if (!materiasColor[materia.grupo_id]) {
                if (materia.obligatorio === true) {
                  materiasColor[materia.grupo_id] = 'bg-secondary';
                } else {
                  materiasColor[materia.grupo_id] = colores[colorIndex % colores.length];
                  colorIndex++;
                }
            }
            
            horaPorGrp[materia.grupo_id] = {};
            let indexDia = 0;
            materia.dias.forEach(dia => {
              horaPorGrp[materia.grupo_id][dia] = [];
              const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
              const bloqueTiempoIds = [];
              let indexBloque = 0;
              for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                
                if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                  bloqueTiempoIds.push(i);
                  indexBloque++;
                } else {
                  bloqueTiempoIds.push(null);
                }
              }
              
              if (horario[diaNombre]) {
                let inicioBloque = bloqueTiempoIds[0];
                let rowSpan = 0;
                for (let bloqueTiempoId of bloqueTiempoIds) {
                  if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                    if (rowSpan > 0) {
                      if (bloqueTiempoId === null) {
                        rowSpan --;
                      }
                      horario[diaNombre][inicioBloque % 24 + 13] = {
                        grupo_id: materia.grupo_id,
                        rowspan: rowSpan,
                        nombre: materia.materia_nombre,
                        color: materiasColor[materia.grupo_id],
                        salon: materia.salon_numero,
                        profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                        hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                      };
                      for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                        horario[diaNombre][b % 24 + 13] = 'ocupar';
                      }
                      rowSpan = 0;
                    }
                  } else {
                    if (rowSpan === 0) {
                      inicioBloque = bloqueTiempoId;
                    }
                    rowSpan ++;
                  }
                }
              }
              indexDia ++;
            });
            });
            }
            for (let bloque = 14; bloque < 32; bloque++) {
            const hora = Math.floor(bloque / 2);
            const minutos = bloque % 2 === 0 ? '00' : '30';
            let horaFormato;
            if (bloque % 2 !== 0) {
            horaFormato = `${hora}:${minutos} - ${hora + 1}:00`;
            } else {
            horaFormato = `${hora}:${minutos} - ${hora}:30`;
            }
            html_container_tabla += `
            <tr style="max-height: 1rem;">
              <th class="hour-cell text-center align-middle">${horaFormato}</th>`;
              ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                if (horario[dia][bloque] === 'ocupar') return;
                if (horario[dia][bloque]) { 
                  const clase = horario[dia][bloque];
                  horaPorGrp[clase.grupo_id][dia].push(clase.hora); 
                  html_container_tabla += `
                    <td class="text-black text-center align-middle ${clase.color}" 
                        rowspan="${clase.rowspan + 1}"
                        data-bs-toggle="tooltip" 
                        data-bs-placement="top"`;
                        if (clase.salon === 9999) {
                          html_container_tabla += `
                            title="${clase.hora} | Salon: No asignado | Prof: ${clase.profesor}">`;
                        } else {
                          html_container_tabla += `
                            title="${clase.hora} | Salon: ${clase.salon} | Prof: ${clase.profesor}">`
                        }
                      html_container_tabla += `
                      ${clase.nombre}
                    </td>`;
                } else {
                  html_container_tabla += `
                    <td class="empty-slot"></td>`;
                }
              })
            html_container_tabla += `
            </tr>`;
            }

        document.getElementById('editModalTableBody').innerHTML = html_container_tabla;
        
        // Tarjetas de materias
        let html_container_materias = '';
        for (let materia_resultado of data.materias_resultado) {
          html_container_materias += `
          <div class="bg-white rounded-5 py-2 mb-3 class-card border ivd-border-red" 
            data-days="${materia_resultado.dias.map(dia => dia.substring(0,2).toUpperCase()).join(',')}"
          >
            <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%;">
              <p class="m-0 me-3 hora-card"></p>
              <p class="m-0" style="color: #84251C;">(${materia_resultado.dias.join(', ')})</p>
            </div>
            <div class="d-flex justify-content-center my-3">
              <div style="border-bottom: 3px solid #84251C; width: 100%;"></div>
            </div>
            <p class="fw-semibold text-center">${materia_resultado.materia_nombre}</p>
            <p class="text-center mb-3">
              Salón: `;
              if (materia_resultado.salon_numero === 9999) {
                html_container_materias += `
                No asignado |`;
              } else {
                html_container_materias += `
                ${materia_resultado.salon_numero} |`
              }
              html_container_materias += ` 
              ${materia_resultado.profesor_nombre} 
              ${materia_resultado.profesor_primer_apellido}
              ${materia_resultado.profesor_segundo_apellido}
            </p>
          </div>`;
        }
        // Reagregar los evenlisteners para que funcionen los botones
        reagregarEventListeners();
      }).catch((error) => {
        console.log(error);
      });
    }

    async function eliminar(event) {
        const button = event.currentTarget;
        const grupo_id = button.getAttribute("data-grupo-id");
        const alumno_id = button.getAttribute("data-alumno-id");
        const horasStr = button.getAttribute("data-horas");
        const horasObj = JSON.parse(horasStr);
        fetch(`/coordinador/alumnos/modificar-horario/eliminar-resultado`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }, 
            body: JSON.stringify({ 
                grupo_id: grupo_id, 
                alumno_id: alumno_id,
                semestre: semestre 
            })
        }).then((res) => {
            return res.json();
        }).then((data) => {
            // Para las materias seleccionadas
            let html_container_materias_seleccionadas = ``;
            let numMateria = 1;
            for (let materia_resultado of data.materias_resultado) {
                html_container_materias_seleccionadas += `
                    <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                        <div class="w-100 d-flex my-2">
                        <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`
                for (let i = 0; i < materia_resultado.dias.length; i++) { 
                    html_container_materias_seleccionadas += `
                              <p class="m-0 me-2">
                                ${Object.values(horasObj[materia_resultado.grupo_id][materia_resultado.dias[i]]).join(", ")}
                              </p>`;
                    if (i !== materia_resultado.dias.length - 1) {
                        html_container_materias_seleccionadas += `
                                <p class="m-0 me-3 ivd-text-red">
                                  (${materia_resultado.dias[i]})  
                                </p>`;
                    } else { 
                        html_container_materias_seleccionadas += `
                                <p class="m-0 ivd-text-red">
                                  (${materia_resultado.dias[i]})  
                                </p>`;
                    }
                }
                html_container_materias_seleccionadas += `
                    </div>
                        <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                                <button class="btn-eliminar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                                style="
                                width: 1.3rem;
                                height: 1.3rem;
                                border-radius: 50%;
                                background-color: #84251c;
                                color: white;
                                border: none;
                                "
                                data-grupo-id="${materia_resultado.grupo_id}"
                                data-alumno-id="${alumno_id}"
                                data-horas="${JSON.stringify(horasObj).replace(/"/g, '&quot;')}"
                                >
                                <svg xmlns="http://www.w3.org/2000/svg" width="13" height="13" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                    <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                                </svg>
                                </button>
                            </div>
                        </div>
                        <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                        <p class="fw-semibold my-3">${materia_resultado.materia_nombre}</p>
                        <p class="mb-3">
                        Salon:`;
                if (materia_resultado.salon_numero === 9999) {
                    html_container_materias_seleccionadas += `
                        No asignado | `;
                } else { 
                    html_container_materias_seleccionadas += `
                        ${materia_resultado.salon_numero} | `;
                }
                html_container_materias_seleccionadas += `
                            ${materia_resultado.profesor_nombre} 
                            ${materia_resultado.profesor_primer_apellido}
                            ${materia_resultado.profesor_segundo_apellido}
                        </p>
                        <div class="ivd-bg-red w-100" style="height: 0.5px;"></div>
                        <div class="btn-group my-2" role="group" aria-label="Basic radio toggle button group">
                          <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnObligatorio${numMateria}" autocomplete="off" 
                            ${materia_resultado.obligatorio ? 'checked' : ''}
                            data-grupo-id="${materia_resultado.grupo_id}"
                            data-alumno-id="${alumno_id}"
                          >
                          <label class="btn btn-outline-danger rounded-start-pill" for="btnObligatorio${numMateria}" style="width: 7rem">Obligatoria</label>

                          <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnOpcional${numMateria}" autocomplete="off" 
                            ${!materia_resultado.obligatorio ? 'checked' : ''}
                            data-grupo-id="${materia_resultado.grupo_id}"
                            data-alumno-id="${alumno_id}"
                          >
                          <label class="btn btn-outline-danger rounded-end-pill" for="btnOpcional${numMateria}" style="width: 7rem">Opcional</label>
                        </div>
                    </div>`
              numMateria ++;
            } 
            document.getElementById('materiasSeleccionadas').innerHTML = html_container_materias_seleccionadas;

            // Para las materias disponibles
            let horaPorGrp2 = {};
            const bloque_tiempo = data.bloque_tiempo;
            const horario2 = { 
              Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
            };
            if (typeof data.materias_disponibles !== 'undefined' && Array.isArray(data.materias_disponibles)) {
              data.materias_disponibles.forEach(materia => {
                horaPorGrp2[materia.grupo_id] = {};
                let indexDia = 0;
                materia.dias.forEach(dia => {
                  horaPorGrp2[materia.grupo_id][dia] = [];
                  const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
                  const bloqueTiempoIds = [];
                  let indexBloque = 0;
                  for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                    
                    if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                      bloqueTiempoIds.push(i);
                      indexBloque++;
                    } else {
                      bloqueTiempoIds.push(null);
                    }
                  }
                  
                  if (horario2[diaNombre]) {
                    let inicioBloque = bloqueTiempoIds[0];
                    let rowSpan = 0;
                    for (let bloqueTiempoId of bloqueTiempoIds) {
                      if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                        if (rowSpan > 0) {
                          if (bloqueTiempoId === null) {
                            rowSpan --;
                          }
                          horario2[diaNombre][inicioBloque % 24 + 13] = {
                            grupo_id: materia.grupo_id,
                            rowspan: rowSpan,
                            nombre: materia.materia_nombre,
                            salon: materia.salon_numero,
                            profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                            hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                          };
                          for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                            horario2[diaNombre][b % 24 + 13] = 'ocupar';
                          }
                          rowSpan = 0;
                        }
                      } else {
                        if (rowSpan === 0) {
                          inicioBloque = bloqueTiempoId;
                        }
                        rowSpan ++;
                      }
                    }
                  }
                  indexDia ++;
                });
              });
            }
            for (let bloque = 14; bloque < 32; bloque++) {
                  ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                    if (horario2[dia][bloque] === 'ocupar') return;
                    if (horario2[dia][bloque]) { 
                      const clase = horario2[dia][bloque];
                      horaPorGrp2[clase.grupo_id][dia].push(clase.hora); 
                    }
                  })
            }
            let html_container_materias_disponibles = ``;
            for (let materia_disponible of data.materias_disponibles) { 
                html_container_materias_disponibles += `
                <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                    <div class="w-100 d-flex my-2">
                        <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`
                for (let i = 0; i < materia_disponible.dias.length; i++) { 
                    html_container_materias_disponibles += `
                              <p class="m-0 me-2">
                                ${Object.values(horaPorGrp2[materia_disponible.grupo_id][materia_disponible.dias[i]]).join(", ")}
                              </p>`;
                    if (i !== materia_disponible.dias.length - 1) {
                        html_container_materias_disponibles += `
                                <p class="m-0 me-3 ivd-text-red">
                                  (${materia_disponible.dias[i]})  
                                </p>`;
                    } else { 
                        html_container_materias_disponibles += `
                                <p class="m-0 ivd-text-red">
                                  (${materia_disponible.dias[i]})  
                                </p>`;
                    }
                }
                html_container_materias_disponibles += `
                </div>
                    <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                        <button class="btn-agregar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                        style="
                            width: 1.3rem;
                            height: 1.3rem;
                            border-radius: 50%;
                            background-color: #84251c;
                            color: white;
                            border: none;
                        "
                        data-grupo-id="${materia_disponible.grupo_id}"
                        data-alumno-id="${alumno_id}"
                        data-horas="${JSON.stringify(horaPorGrp2).replace(/"/g, '&quot;')}"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                <p class="fw-semibold my-3">${materia_disponible.materia_nombre}</p>
                <p class="mb-3">
                        Salon:`;
                if (materia_disponible.salon_numero === 9999) {
                    html_container_materias_disponibles += `
                        No asignado | `;
                } else { 
                    html_container_materias_disponibles += `
                        ${materia_disponible.salon_numero} | `;
                }
                html_container_materias_disponibles += `
                    ${materia_disponible.profesor_nombre} 
                    ${materia_disponible.profesor_primer_apellido}
                    ${materia_disponible.profesor_segundo_apellido}
                </p>
                </div>`;
            }
            document.getElementById('materiasDisponibles').innerHTML = html_container_materias_disponibles;
            // Recargar la tabla del horario
          // Tabla de horario
          const colores = ['bg-primary-subtle', 'bg-success-subtle ','bg-warning-subtle ','bg-danger-subtle','bg-info-subtle'];
          const materiasColor = {};
          let html_container_tabla = '';
          let colorIndex = 0;
          let horaPorGrp = {};
          
          const horario = { 
            Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
          };
          
          if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
            data.materias_resultado.forEach(materia => {
              // Asignar color único por materia
              if (!materiasColor[materia.grupo_id]) {
                  if (materia.obligatorio === true) {
                    materiasColor[materia.grupo_id] = 'bg-secondary';
                  } else {
                    materiasColor[materia.grupo_id] = colores[colorIndex % colores.length];
                    colorIndex++;
                  }
              }
              
              horaPorGrp[materia.grupo_id] = {};
              let indexDia = 0;
              materia.dias.forEach(dia => {
                horaPorGrp[materia.grupo_id][dia] = [];
                const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
                const bloqueTiempoIds = [];
                let indexBloque = 0;
                for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                  
                  if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                    bloqueTiempoIds.push(i);
                    indexBloque++;
                  } else {
                    bloqueTiempoIds.push(null);
                  }
                }
                
                if (horario[diaNombre]) {
                  let inicioBloque = bloqueTiempoIds[0];
                  let rowSpan = 0;
                  for (let bloqueTiempoId of bloqueTiempoIds) {
                    if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                      if (rowSpan > 0) {
                        if (bloqueTiempoId === null) {
                          rowSpan --;
                        }
                        horario[diaNombre][inicioBloque % 24 + 13] = {
                          grupo_id: materia.grupo_id,
                          rowspan: rowSpan,
                          nombre: materia.materia_nombre,
                          color: materiasColor[materia.grupo_id],
                          salon: materia.salon_numero,
                          profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                          hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                        };
                        for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                          horario[diaNombre][b % 24 + 13] = 'ocupar';
                        }
                        rowSpan = 0;
                      }
                    } else {
                      if (rowSpan === 0) {
                        inicioBloque = bloqueTiempoId;
                      }
                      rowSpan ++;
                    }
                  }
                }
                indexDia ++;
              });
              });
              }
              for (let bloque = 14; bloque < 32; bloque++) {
              const hora = Math.floor(bloque / 2);
              const minutos = bloque % 2 === 0 ? '00' : '30';
              let horaFormato;
              if (bloque % 2 !== 0) {
              horaFormato = `${hora}:${minutos} - ${hora + 1}:00`;
              } else {
              horaFormato = `${hora}:${minutos} - ${hora}:30`;
              }
              html_container_tabla += `
              <tr style="max-height: 1rem;">
                <th class="hour-cell text-center align-middle">${horaFormato}</th>`;
                ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                  if (horario[dia][bloque] === 'ocupar') return;
                  if (horario[dia][bloque]) { 
                    const clase = horario[dia][bloque];
                    horaPorGrp[clase.grupo_id][dia].push(clase.hora); 
                    html_container_tabla += `
                      <td class="text-black text-center align-middle ${clase.color}" 
                          rowspan="${clase.rowspan + 1}"
                          data-bs-toggle="tooltip" 
                          data-bs-placement="top"`;
                          if (clase.salon === 9999) {
                            html_container_tabla += `
                              title="${clase.hora} | Salon: No asignado | Prof: ${clase.profesor}">`;
                          } else {
                            html_container_tabla += `
                              title="${clase.hora} | Salon: ${clase.salon} | Prof: ${clase.profesor}">`
                          }
                        html_container_tabla += `
                        ${clase.nombre}
                      </td>`;
                  } else {
                    html_container_tabla += `
                      <td class="empty-slot"></td>`;
                  }
                })
              html_container_tabla += `
              </tr>`;
            }
            document.getElementById('editModalTableBody').innerHTML = html_container_tabla;
            // Reagregar los evenlisteners para que funcionen los botones
            reagregarEventListeners();
        }).catch((error) => {
            console.log(error);
        });
    }

    async function agregar(event) {
        const button = event.currentTarget;
        const grupo_id = button.getAttribute("data-grupo-id");
        const alumno_id = button.getAttribute("data-alumno-id");
        const horasStr = button.getAttribute("data-horas");
        const horasObj = JSON.parse(horasStr);
        fetch(`/coordinador/alumnos/modificar-horario/agregar-resultado`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            }, 
            body: JSON.stringify({ 
                grupo_id: grupo_id,
                alumno_id: alumno_id, 
                semestre: semestre 
            })
        }).then((res) => {
            return res.json();
        }).then((data) => {
            // Para las materias seleccionadas
            let html_container_materias_seleccionadas = ``;
            let numMateria = 1;
            let horaPorGrp2 = {};
            const bloque_tiempo = data.bloque_tiempo;
            const horario2 = { 
              Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
            };
            if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
              data.materias_resultado.forEach(materia => {
                horaPorGrp2[materia.grupo_id] = {};
                let indexDia = 0;
                materia.dias.forEach(dia => {
                  horaPorGrp2[materia.grupo_id][dia] = [];
                  const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
                  const bloqueTiempoIds = [];
                  let indexBloque = 0;
                  for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                    
                    if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                      bloqueTiempoIds.push(i);
                      indexBloque++;
                    } else {
                      bloqueTiempoIds.push(null);
                    }
                  }
                  
                  if (horario2[diaNombre]) {
                    let inicioBloque = bloqueTiempoIds[0];
                    let rowSpan = 0;
                    for (let bloqueTiempoId of bloqueTiempoIds) {
                      if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                        if (rowSpan > 0) {
                          if (bloqueTiempoId === null) {
                            rowSpan --;
                          }
                          horario2[diaNombre][inicioBloque % 24 + 13] = {
                            grupo_id: materia.grupo_id,
                            rowspan: rowSpan,
                            nombre: materia.materia_nombre,
                            salon: materia.salon_numero,
                            profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                            hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                          };
                          for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                            horario2[diaNombre][b % 24 + 13] = 'ocupar';
                          }
                          rowSpan = 0;
                        }
                      } else {
                        if (rowSpan === 0) {
                          inicioBloque = bloqueTiempoId;
                        }
                        rowSpan ++;
                      }
                    }
                  }
                  indexDia ++;
                });
              });
            }
            for (let bloque = 14; bloque < 32; bloque++) {
                  ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                    if (horario2[dia][bloque] === 'ocupar') return;
                    if (horario2[dia][bloque]) { 
                      const clase = horario2[dia][bloque];
                      horaPorGrp2[clase.grupo_id][dia].push(clase.hora); 
                    }
                  })
            }
            for (let materia_resultado of data.materias_resultado) {
                html_container_materias_seleccionadas += `
                    <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                        <div class="w-100 d-flex my-2">
                            <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`
                for (let i = 0; i < materia_resultado.dias.length; i++) { 
                    html_container_materias_seleccionadas += `
                              <p class="m-0 me-2">
                                ${Object.values(horaPorGrp2[materia_resultado.grupo_id][materia_resultado.dias[i]]).join(", ")}
                              </p>`;
                    if (i !== materia_resultado.dias.length - 1) {
                        html_container_materias_seleccionadas += `
                                <p class="m-0 me-3 ivd-text-red">
                                  (${materia_resultado.dias[i]})  
                                </p>`;
                    } else { 
                        html_container_materias_seleccionadas += `
                                <p class="m-0 ivd-text-red">
                                  (${materia_resultado.dias[i]})  
                                </p>`;
                    }
                }
                html_container_materias_seleccionadas += `
                    </div>
                        <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                                <button class="btn-eliminar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                                style="
                                width: 1.3rem;
                                height: 1.3rem;
                                border-radius: 50%;
                                background-color: #84251c;
                                color: white;
                                border: none;
                                "
                                data-grupo-id="${materia_resultado.grupo_id}"
                                data-alumno-id="${alumno_id}"
                                data-horas="${JSON.stringify(horaPorGrp2).replace(/"/g, '&quot;')}"
                                >
                                <svg xmlns="http://www.w3.org/2000/svg" width="13" height="13" fill="currentColor" class="bi bi-x-lg" viewBox="0 0 16 16">
                                    <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8z"/>
                                </svg>
                                </button>
                            </div>
                        </div>
                        <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                        <p class="fw-semibold my-3">${materia_resultado.materia_nombre}</p>
                        <p class="mb-3">
                        Salon:`;
                if (materia_resultado.salon_numero === 9999) {
                    html_container_materias_seleccionadas += `
                        No asignado | `;
                } else { 
                    html_container_materias_seleccionadas += `
                        ${materia_resultado.salon_numero} | `;
                }
                html_container_materias_seleccionadas += `
                            ${materia_resultado.profesor_nombre} 
                            ${materia_resultado.profesor_primer_apellido}
                            ${materia_resultado.profesor_segundo_apellido}
                        </p>
                        <div class="ivd-bg-red w-100" style="height: 0.5px;"></div>
                        <div class="btn-group my-2" role="group" aria-label="Basic radio toggle button group">
                          <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnObligatorio${numMateria}" autocomplete="off" 
                            ${materia_resultado.obligatorio ? 'checked' : ''}
                            data-grupo-id="${materia_resultado.grupo_id}"
                            data-alumno-id="${alumno_id}"
                          >
                          <label class="btn btn-outline-danger rounded-start-pill" for="btnObligatorio${numMateria}" style="width: 7rem">Obligatoria</label>

                          <input type="radio" class="btn-check" name="btnradio${numMateria}" id="btnOpcional${numMateria}" autocomplete="off" 
                            ${!materia_resultado.obligatorio ? 'checked' : ''}
                            data-grupo-id="${materia_resultado.grupo_id}"
                            data-alumno-id="${alumno_id}"
                          >
                          <label class="btn btn-outline-danger rounded-end-pill" for="btnOpcional${numMateria}" style="width: 7rem">Opcional</label>
                        </div>
                    </div>`
              numMateria ++;
            } 
            document.getElementById('materiasSeleccionadas').innerHTML = html_container_materias_seleccionadas;

            // Para las materias disponibles
            let html_container_materias_disponibles = ``;
            for (let materia_disponible of data.materias_disponibles) { 
                html_container_materias_disponibles += `
                <div class="w-100 d-flex flex-column align-items-center rounded-5 mt-3" style="background-color: white;">
                <div class="w-100 d-flex my-2">
                    <div class="d-flex m-0 align-items-center justify-content-center" style="width: 100%; padding-left: 10%;">`;
                for (let i = 0; i < materia_disponible.dias.length; i++) { 
                    html_container_materias_disponibles += `
                              <p class="m-0 me-2">
                                ${Object.values(horasObj[materia_disponible.grupo_id][materia_disponible.dias[i]]).join(", ")}
                              </p>`;
                    if (i !== materia_disponible.dias.length - 1) {
                        html_container_materias_disponibles += `
                                <p class="m-0 me-3 ivd-text-red">
                                  (${materia_disponible.dias[i]})  
                                </p>`;
                    } else { 
                        html_container_materias_disponibles += `
                                <p class="m-0 ivd-text-red">
                                  (${materia_disponible.dias[i]})  
                                </p>`;
                    }
                }
                html_container_materias_disponibles += `
                          </div>
                    <div class="d-flex align-items-center justify-content-end" style="width: 10%;">
                        <button class="btn-agregar btn btn-sm p-0 d-flex align-items-center justify-content-center me-3" 
                        style="
                            width: 1.3rem;
                            height: 1.3rem;
                            border-radius: 50%;
                            background-color: #84251c;
                            color: white;
                            border: none;
                        "
                        data-grupo-id="${materia_disponible.grupo_id}"
                        data-alumno-id="${alumno_id}"
                        data-horas="${JSON.stringify(horasObj).replace(/"/g, '&quot;')}"
                        >
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus" viewBox="0 0 16 16">
                            <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4"/>
                            </svg>
                        </button>
                    </div>
                </div>
                <div class="ivd-bg-red w-100" style="height: 1px;"></div>
                <p class="fw-semibold my-3">${materia_disponible.materia_nombre}</p>
                <p class="mb-3">
                        Salon:`;
                if (materia_disponible.salon_numero === 9999) {
                    html_container_materias_disponibles += `
                        No asignado | `;
                } else { 
                    html_container_materias_disponibles += `
                        ${materia_disponible.salon_numero} | `;
                }
                html_container_materias_disponibles += `
                    ${materia_disponible.profesor_nombre} 
                    ${materia_disponible.profesor_primer_apellido}
                    ${materia_disponible.profesor_segundo_apellido}
                </p>
                </div>`;
            }
            document.getElementById('materiasDisponibles').innerHTML = html_container_materias_disponibles;
            // Tabla de horario
            const colores = ['bg-primary-subtle', 'bg-success-subtle ','bg-warning-subtle ','bg-danger-subtle','bg-info-subtle'];
            const materiasColor = {};
            let html_container_tabla = '';
            let colorIndex = 0;
            let horaPorGrp = {};
            
            const horario = { 
              Lunes: {}, Martes: {}, Miércoles: {}, Jueves: {}, Viernes: {} 
            };
            
            if (typeof data.materias_resultado !== 'undefined' && Array.isArray(data.materias_resultado)) {
              data.materias_resultado.forEach(materia => {
                // Asignar color único por materia
                if (!materiasColor[materia.grupo_id]) {
                    if (materia.obligatorio === true) {
                      materiasColor[materia.grupo_id] = 'bg-secondary';
                    } else {
                      materiasColor[materia.grupo_id] = colores[colorIndex % colores.length];
                      colorIndex++;
                    }
                }
                
                horaPorGrp[materia.grupo_id] = {};
                let indexDia = 0;
                materia.dias.forEach(dia => {
                  horaPorGrp[materia.grupo_id][dia] = [];
                  const diaNombre = dia.charAt(0).toUpperCase() + dia.slice(1).toLowerCase();
                  const bloqueTiempoIds = [];
                  let indexBloque = 0;
                  for (let i = materia.bloque_tiempo_id[indexDia][0]; i <= materia.bloque_tiempo_id[indexDia][materia.bloque_tiempo_id[indexDia].length - 1]; i++) {
                    
                    if (i === materia.bloque_tiempo_id[indexDia][indexBloque]) {
                      bloqueTiempoIds.push(i);
                      indexBloque++;
                    } else {
                      bloqueTiempoIds.push(null);
                    }
                  }
                  
                  if (horario[diaNombre]) {
                    let inicioBloque = bloqueTiempoIds[0];
                    let rowSpan = 0;
                    for (let bloqueTiempoId of bloqueTiempoIds) {
                      if (bloqueTiempoId === null || bloqueTiempoId === bloqueTiempoIds[bloqueTiempoIds.length - 1]) {
                        if (rowSpan > 0) {
                          if (bloqueTiempoId === null) {
                            rowSpan --;
                          }
                          horario[diaNombre][inicioBloque % 24 + 13] = {
                            grupo_id: materia.grupo_id,
                            rowspan: rowSpan,
                            nombre: materia.materia_nombre,
                            color: materiasColor[materia.grupo_id],
                            salon: materia.salon_numero,
                            profesor: `${materia.profesor_nombre} ${materia.profesor_primer_apellido} ${materia.profesor_segundo_apellido}`,
                            hora: `${bloque_tiempo[inicioBloque][0].slice(0, 5)} - ${bloque_tiempo[inicioBloque + rowSpan][1].slice(0, 5)}`
                          };
                          for (let b = inicioBloque + 1; b <= inicioBloque + rowSpan; b++) {
                            horario[diaNombre][b % 24 + 13] = 'ocupar';
                          }
                          rowSpan = 0;
                        }
                      } else {
                        if (rowSpan === 0) {
                          inicioBloque = bloqueTiempoId;
                        }
                        rowSpan ++;
                      }
                    }
                  }
                  indexDia ++;
                  });
                });
              }
              for (let bloque = 14; bloque < 32; bloque++) {
              const hora = Math.floor(bloque / 2);
              const minutos = bloque % 2 === 0 ? '00' : '30';
              let horaFormato;
              if (bloque % 2 !== 0) {
              horaFormato = `${hora}:${minutos} - ${hora + 1}:00`;
              } else {
              horaFormato = `${hora}:${minutos} - ${hora}:30`;
              }
              html_container_tabla += `
              <tr style="max-height: 1rem;">
                <th class="hour-cell text-center align-middle">${horaFormato}</th>`;
                ['Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes'].forEach(dia => {
                  if (horario[dia][bloque] === 'ocupar') return;
                  if (horario[dia][bloque]) { 
                    const clase = horario[dia][bloque];
                    horaPorGrp[clase.grupo_id][dia].push(clase.hora); 
                    html_container_tabla += `
                      <td class="text-black text-center align-middle ${clase.color}" 
                          rowspan="${clase.rowspan + 1}"
                          data-bs-toggle="tooltip" 
                          data-bs-placement="top"`;
                          if (clase.salon === 9999) {
                            html_container_tabla += `
                              title="${clase.hora} | Salon: No asignado | Prof: ${clase.profesor}">`;
                          } else {
                            html_container_tabla += `
                              title="${clase.hora} | Salon: ${clase.salon} | Prof: ${clase.profesor}">`
                          }
                        html_container_tabla += `
                        ${clase.nombre}
                      </td>`;
                  } else {
                    html_container_tabla += `
                      <td class="empty-slot"></td>`;
                  }
                })
              html_container_tabla += `
              </tr>`;
            }
            document.getElementById('editModalTableBody').innerHTML = html_container_tabla;
            // Reagregar los evenlisteners para que funcionen los botones
            reagregarEventListeners();
        }).catch((error) => {
            console.log(error);
        });
    }

    // Cuando se elimina una materia selccionada
    document.querySelectorAll(".btn-eliminar").forEach((button) => {
        button.addEventListener("click", eliminar);
    });

    // Cuando se agrega una materia disponible
    document.querySelectorAll(".btn-agregar").forEach((button) => {
        button.addEventListener("click", agregar);
    });

    document.querySelectorAll('input[name^="btnradio"]').forEach((radio) => {
          radio.addEventListener("change", obligacion);
    });
  });

  // Barra de búsqueda para tabla de alumnos regulares
  const searchInputAlumnoRegular = document.getElementById('buscarAlumnoRegular');
  const alumnosRegularesBody = document.getElementById('alumnoRegularTablaBody');

  // Escucha el evento de keyup (cuando el usuario escribe)
  searchInputAlumnoRegular.addEventListener('keyup', function() {
    const searchValue = this.value.toLowerCase().trim();
    // Obtiene todas las filas de la tabla
    const rows = alumnosRegularesBody.querySelectorAll('tr');
    
    rows.forEach(row => {
      // Filtramos el contenido de búsqueda basándonos en todo el texto de la fila. 
      const rowText = row.textContent.toLowerCase();
      
      // Si el término buscado se encuentra en el texto de la fila, se muestra, de lo contrario se oculta
      if (rowText.includes(searchValue)) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  });

  // Barra de búsqueda para tabla de alumnos irregulares
  const searchInputAlumnoIrregular = document.getElementById('buscarAlumnoIrregular');
  const alumnosIrregularesBody = document.getElementById('alumnoIrregularTablaBody');

  // Escucha el evento de keyup (cuando el usuario escribe)
  searchInputAlumnoIrregular.addEventListener('keyup', function() {
    const searchValue = this.value.toLowerCase().trim();
    // Obtiene todas las filas de la tabla
    const rows = alumnosIrregularesBody.querySelectorAll('tr');
    
    rows.forEach(row => {
      // Filtramos el contenido de búsqueda basándonos en todo el texto de la fila. 
      const rowText = row.textContent.toLowerCase();
      
      // Si el término buscado se encuentra en el texto de la fila, se muestra, de lo contrario se oculta
      if (rowText.includes(searchValue)) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
      }
    });
  });
</script>

</body>
</html>